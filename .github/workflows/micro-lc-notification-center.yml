name: Node.js notification-center CI

env:
  cache-name: cache-build

on:
  push:
    branches: [ master ]
    tags: ['*']
  pull_request:
    branches: [ master ]

jobs:
  test:
    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: 
          - 14.x
          - 17.x
    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v1
      with:
        node-version: ${{ matrix.node-version }}
    - run: yarn install --frozen-lockfile
    - run: yarn run coverage
    - name: Coveralls
      uses: coverallsapp/github-action@master
      continue-on-error: true
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        path-to-lcov: '${{ env.context }}coverage/lcov.info'
        base-path: '${{ env.context }}'

    - name: Compile file and build
      if: ${{ (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' || github.base_ref == 'master') && matrix.node-version == '14.x' }}
      run: yarn build

    - name: Cache build
      if: ${{ (startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' || github.base_ref == 'master') && matrix.node-version == '14.x' }}
      uses: actions/cache@v2
      with:
        path: ${{ env.context }}dist/micro-lc-notification-center
        key: ${{ runner.os }}-dist-micro-lc-notification-center-${{ env.cache-name }}-${{ github.sha }}

  docker-build:
    name: Build docker
    needs: test
    runs-on: ubuntu-latest
    if: ${{ startsWith(github.ref, 'refs/tags/') || github.ref == 'refs/heads/master' }}

    steps:
      - name: Checkout code
        uses: actions/checkout@v2

      - name: Prepare
        id: prep
        run: |
          DOCKER_IMAGE=microlc/micro-lc-notification-center
          VERSION=latest
          if [[ $GITHUB_REF == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
            VERSION=$(echo ${VERSION} | sed s/^v//)
          elif [[ $GITHUB_REF == refs/heads/master ]]; then
            VERSION=latest
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=image::${DOCKER_IMAGE}
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v1

      - name: Login to DockerHub
        uses: docker/login-action@v1
        with:
          username: ${{ secrets.BOT_DOCKER_USERNAME }}
          password: ${{ secrets.BOT_DOCKER_TOKEN }}

      - name: Cache build
        uses: actions/cache@v2
        with:
          path: ${{ env.context }}dist/micro-lc-notification-center
          key: ${{ runner.os }}-dist-micro-lc-notification-center-${{ env.cache-name }}-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-dist-micro-lc-notification-center-${{ env.cache-name }}-${{ github.sha }}
      - name: Build and push
        uses: docker/build-push-action@v2
        with:
          context: '${{ env.context }}'
          push: true
          tags: ${{ steps.prep.outputs.tags }}
